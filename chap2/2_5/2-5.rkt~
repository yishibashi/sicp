#lang racket

; tag
;(define (attach-tag tag contents)
;  (cons tag contents))
;(define (type-tag datum)
;  (if (pair? datum)
;      (car datum)
;      (error "Bad tagged datum: TYPE-TAG" datum)))
;(define (contents dataum)
;  (if (pair? dataum)
;      (cdr dataum)
;      (error "Bad tagged dataum: CONTENTS" dataum)))


; ex 2.78
(define (attach-tag tag contents)
  (if (number? contents)
      contents
      (cons tag contents)))
(define (type-tag datum)
  (cond ((number? datum) 'scheme-number)
        ((pair? datum) (car datum))
        (else (error "Bad tagged datum: TYPE-TAG" datum))))
(define (contents datum)
  (cond ((number? datum) datum)
        ((pair? datum) (cdr datum))
        (else (error "Bad tagged dataum: CONTENTS" dataum))))


(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args)) 
          (error
           "No method for these types: APPLY-GENERIC"
           (list op type-tags))))))


; to use put/get

(define global-array '())

(define (make-entry k v) (list k v))
(define (key entry) (car entry))
(define (value entry) (cadr entry))

(define (put op type item)
  (define (put-helper k array)
    (cond ((null? array) (list(make-entry k item)))
          ((equal? (key (car array)) k) array)
          (else (cons (car array) (put-helper k (cdr array))))))
  (set! global-array (put-helper (list op type) global-array)))

(define (get op type)
  (define (get-helper k array)
    (cond ((null? array) #f)
          ((equal? (key (car array)) k) (value (car array)))
          (else (get-helper k (cdr array)))))
  (get-helper (list op type) global-array))



;;;get put;;;
;(define global-array '())
;
;(define (make-entry k v) (list k v))
;(define (key entry) (car entry))
;(define (value entry) (cadr entry))

;(define (put-table table key1 key2 item)
;    (if (not (hash-has-key? table key1))
;        (hash-set! table key1 (make-hash))
;        true)
;    (hash-set! (hash-ref table key1) key2 item))
 
;(define (get-table table key1 key2)
;    (define (not-found . msg)
;          (display msg (current-error-port))
;          (display "\n")
        ;false)
;    (if (hash-has-key? table key1)
;        (if (hash-has-key? (hash-ref table key1) key2)
;            (hash-ref (hash-ref table key1) key2)
;            (not-found "Bad key -- KEY2" key2))
;        (not-found "Bad key -- KEY1" key1)))

;(define *op-table* (make-hash))
;(define (put op type item)
;    (put-table *op-table* op type item))
;(define (get op type)
;    (get-table *op-table* op type))

;(define *coercion-table* (make-hash))
;(define (put-coercion type1 type2 item)
;    (put-table *coercion-table* type1 type2 item))
;(define (get-coercion type1 type2)
;    (get-table *coercion-table* type1 type2))





; 

(define (gcd a b) 
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (square x) (* x x))


(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

;; 通常の算術演算
(define (install-scheme-number-package)
  (define (tag x) (attach-tag 'scheme-number x))
  
  ; ex 2.79
  (define (equ-scm? x y) (= x y))
  (put 'equ? '(scheme-number scheme-number)
       (lambda (x y) (equ-scm? x y)))
  ; ex 2.80
  (define (=zero-scm? x) (= x 0))
  (put '=zero? '(scheme-number)
       (lambda (x) (=zero-scm? x)))
  
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number (lambda (x) (tag x)))
  
  
  ; ex 2.83
  ;(define (raise->rat x)
  ;  ((get 'make 'rational) x 1))
  ;(put 'raise '(scheme-number)
  ;     (lambda (x) (raise->rat x)))
  
  'done)

;; （タグつきの）通常の数値を作成する
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))

(install-scheme-number-package)



(define a (make-scheme-number 10))
a

(define b (make-scheme-number 3))
b

(add a b)

(sub a b)

(mul a b)

(div a b)



;; 有理数算術演算
(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
              
  (define (dib-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (tag x) (attach-tag 'rational x))
  
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  
  ; ex 2.79
  (define (equ-rat? x y)
    (and (= (numer x) (numer y))
         (= (denom x) (denom y))))
  (put 'equ? '(rational rational)
       (lambda (x y) (equ-rat? x y)))
  
  ; ex 2.80
  (define (=zero-rat? x)
    (= (numer x) 0))
  (put '=zero? '(rational)
       (lambda (x) (=zero-rat? x)))
  
  ; ex 2.83
  (define (raise->real x) ; rational -> real 
    ((get 'make 'real) (* (/ (numer x) (denom x )) 1.0)))
  (put 'raise '(rational)
       (lambda (x) (raise->real x))) 
  
  ; ex 2.85
  (define (project->int x)
  (let ((n (numer x))
        (d (denom x)))
    ((get 'make 'integer) (floor (/ n d))))) ;; floor:pythonのmath.floorを使用している. intを返す.
  
  (put 'project '(rational)
       (lambda (x) (project->int x)))
         

  
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))


(install-rational-package)

(define s (make-rational 10 3))
s

(define t (make-rational 2 3))
t

(add s t)

(sub s t)

(mul s t)

(div s t)



; complex packages

(define (install-rectangular-package)
   ;; 内部手続き
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a) 
    (cons (* r (cos a)) (* r (sin a))))

   ;; システムの他の部分とのインターフェース
  (define (tag x) (attach-tag 'rectangular x)) 
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular 
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular 
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)


(define (install-polar-package)
   ;; 内部手続き
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z)
    (* (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (* (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y) 
    (cons (sqrt (+ (square x) (square y)))
          (atan y x)))

   ;; システムの他の部分とのインターフェース
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar 
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(install-rectangular-package)
(install-polar-package)

(define (install-complex-package)
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  
  ; <-- add (exercise 2.77)
  (define (real-part z)
    (apply-generic 'real-part z))
  (define (imag-part z)
    (apply-generic 'imag-part z))
  (define (magnitude z)
    (apply-generic 'magnitude z))
  (define (angle z)
    (apply-generic 'angle z))
  ; add -->

  (define (add-complex z1 z2)
    (print z1)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))
  
  (define (tag z) (attach-tag 'complex z))
  
  ; <- add for exercise 2.77
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  ; add -->
  
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  
  
    
  ; ex 2.79
  (define (equ-comp? x y)
    (and (= (real-part x) (real-part y))
         (= (imag-part x) (imag-part y))))
  (put 'equ? '(complex complex)
       (lambda (x y) (equ-comp? x y)))
  ; ex 2.80
  (define (=zero-comp? x)
    (and (= (imag-part x) 0)
         (= (real-part x) 0)))
  (put '=zero? '(complex)
       (lambda (x) (=zero-comp? x)))
  
  ; または、　magnitude == 0 をチェック
  
  'done)
 
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))

(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))


(install-complex-package)

(define x (make-complex-from-mag-ang 1 2))
x

(define y (make-complex-from-real-imag 3 1))
y

(magnitude x)

(add x y)

(sub x y)

(mul x y)

(div x y)

(make-scheme-number 1)

(add 1 1)
(sub 3 1)
(div 2 1)
(mul 1 2)

(define (equ? x y) (apply-generic 'equ? x y))

(print (equ? (make-rational 1 2) (make-rational 3 4)))

(print (equ? (make-rational 1 2) (make-rational 1 2)))

(print (equ? (make-complex-from-real-imag 1 2) (make-complex-from-real-imag 2 3)))

(print (equ? (make-complex-from-real-imag 1 2) (make-complex-from-real-imag 1 2)))

(define (=zero? x) (apply-generic '=zero? x))

(print (=zero? (make-rational 1 2)))
(print (=zero? (make-rational 0 2)))
(print (=zero? (make-complex-from-real-imag 1 2)))
(print (=zero? (make-complex-from-real-imag 0 0)))

(define (scheme-number->complex n)
  (make-complex-from-real-imag (contents n) 0))

; 特別な強制型変換テーブルに組み込むことにする。

;(put-coercion 'scheme-number 'complex scheme-number->complex)


; 強制型変換テーブルが準備できたら apply-generic に変更を加え
; ることで、強制型変換を統一的に行うことができるようになる。

; 演算を適用することを求められたら、最初はこれまでと同じように引数の型に対して
; 演算が定義されているかをチェックする。定義されていれば、演算-型テーブルで見つかった
; 手続きにディスパッチする。定義されていなければ、強制型変換テーブルを見て、
; 一つ目の型のオブジェクトが二つ目の型に強制型変換可能かどうか確認し、可能なら一つ目の
; 引数を強制型変換し、もう一度演算を試みる。可能でない場合は、逆に二つ目の型の
; オブジェクトが一つ目の型に強制型変換できないか試す。

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((type-tags (map type-tag args)))
      (let ((proc (get op type-tags)))
        (if proc
            (apply proc (map contents args))
            (if (= (length args) 2)
                (let ((type1 (car type-tags))
                      (type2 (cadr type-tags))
                      (a1 (car args))
                      (a2 (cadr args)))
                  (let ((t1->t2 (get-coercion type1 type2))
                        (t2->t1 (get-coercion type2 type1)))
                    (cond (t1->t2
                           (apply-generic op (t1->t2 a1) a2))
                          (t2->t1
                           (apply-generic op a1 (t2->t1 a2)))
                          (else (error "No method for these types" 
                                       (list op type-tags))))))
                (error "No method for these types" 
                       (list op type-tags))))))))



(define (attach-tag tag contents)
  (cons tag contents))
(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged datum: TYPE-TAG" datum)))
(define (contents dataum)
  (if (pair? dataum)
      (cdr dataum)
      (error "Bad tagged dataum: CONTENTS" dataum)))


(define (install-integer-package)
  (define (tag x) (attach-tag 'integer x))
  (put 'add '(integer integer)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(integer integer)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(integer integer)
       (lambda (x y) (tag (* x y))))
  (put 'div '(integer integer)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'integer (lambda (x) (tag x)))
  (put '=zero? '(integer) (lambda (x) (= x 0)))
  (put 'raise '(integer) (lambda (x) ((get 'make 'rational) x 1)))
  'done)

(define (install-real-package)
  (define (tag x) (attach-tag 'real x))
  (put 'add '(real real)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(real real)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(real real)
       (lambda (x y) (tag (* x y))))
  (put 'div '(real real)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'real (lambda (x) (tag (* 1.0 x))))
  (put '=zero? '(real) (lambda (x) (= x 0)))
  (put 'raise '(real)
       (lambda (x) ((get 'make-from-real-imag 'complex) x 0)))
  'done)



(install-integer-package)
(define (make-integer x )
  ((get 'make 'integer) x))

(install-real-package)
(define (make-real x )
  ((get 'make 'real) x))

(define (raise-number x) (apply-generic 'raise x))

(define i (make-integer 3))

(raise-number i)

(raise-number (raise-number i))

(raise-number (raise-number (raise-number i)))

(define type-tower '(complex real rational integer))

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (if (higher type1 type2)
                    (apply-generic op a1 (raise a2))
                    (apply-generic op (raise a1) a2)))
              (error "No method for these types" (list op type-tags)))))))

(define (higher? t1 t2) ; check t1 > t2 ?
  (define (iter t1 t2 type-tower)
    (cond ((eq? t1 t2) #t)
          ((eq? t1 (car type-tower)) #f)
          ((eq? t2 (car type-tower)) #f)
          (else (iter t1 t2 (cdr type-tower)))))
  (iter t1 t2 type-tower))


(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))





(define i (make-integer 3))
(define r (make-rational 3 2))
(define rl (make-real 2.222))
(define c (make-complex-from-real-imag 3 2))
(print i)
(print r)
(print rl)
(print c)

; can't run in Calysto-Scheme3
(add i r)
(sub i rl)
(mul c r)
(div r i)

(define (raise-number x) (apply-generic 'raise x))

(define (project x)
  (apply-generic 'project x))

(define (drop x)
  (let (y (project x))
    (if (equ? x (raise y))
        (drop y)
        x)))

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (if (higher type1 type2)
                    (drop (apply-generic op a1 (raise a2)))
                    (drop (apply-generic op (raise a1) a2))))
              (error "No method for these types" (list op type-tags)))))))

(project (make-complex-from-real-imag 3 1))



