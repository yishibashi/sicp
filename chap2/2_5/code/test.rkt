#lang racket

(load "./general.rkt")


(define i (make-integer 3))
(define r (make-rational 3 2))
(define rl (make-real 2.222))
(define c (make-complex-from-real-imag 3 2))
(print "print 'i', 'r', 'rl', and 'c'") (newline)
(print i)
(print r)
(print rl)
(print c)
(print "print raised 'i', 'r', 'rl', and 'c'")
(print (raise i))
(print (raise r))
(print (raise rl))
(print "print add, sub, mul & div")
(print (add i r))
(print (sub i rl))
(print (mul c r))
(print (div r i))
(print "print project 'i', 'r', 'rl', and 'c'")
(print (project r))
(print (project rl))
(print (project c))
(print "drop")
(print (drop (make-complex-from-real-imag 3 1)))
(print (drop (make-complex-from-mag-ang 3 0)))
(print (drop (make-real 1.5)))
(print (drop (make-real 1.0)))
(print (add (make-real 1.0) (make-complex-from-real-imag 3 0)))
(define z1 (make-complex-from-real-imag (make-rational 3 2) (make-rational 1 2)))
(define z2 (make-complex-from-mag-ang (make-real 2.3) (make-rational 2 3)))
(print z1)
(print z2)
;(add z1 z1)
(define p1 (make-polynomial 'x '((2 1) (1 2) (0 1))))
(print p1)
(define p2 (make-polynomial 'x '((2 1) (1 4) (0 2))))
(print p2)
;(print (add p1 p2))
